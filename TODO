Spatosc TODO
============

* When we set XYZ, or AED, renderers should receiver AED, no matter what.

August 2011 new stuff
---------------------
 * add SoundSource::setUri
 * Wrapper::setPositionAed
 * Node::refresh, Scene::refresh, Wrapper::refresh
 * [spatosc]::flushMessages
 * [spatosc]::setSynchronous

Release-critical for 0.2
------------------------
 * Connection::handleMessage remove calls to assert()
 * Connection::handleMessage pass liblo types to validate them
 * avoid to include unused.h from public header files
 * test properties well
 * implement OSC callbacks for float and int properties
 * implement float/int properties in pd-external example
 * setter method for verbose property in translators, with pd method 

FUDI-specific features and issues
---------------------------------
 * FUDI: Make sure the FUDI sender works on Windows
 * FUDI: reuse the socket

OSC Messages to handle
----------------------
 * Node::handleMessage setOrientation
 * Node::handleMessage xy
 * Node::handleMessage delay
 * Node::handleMessage gain
 * Node::handleMessage gainDB
 * Node::handleMessage spread
 * Node::handleMessage spreadAE
 * Connection::handleMessage /xy f:x f:y (projected position on xy plane)
 * Connection::handleMessage /spread f:spread
 * Connection::handleMessage /spreadAE f:azim_spread f:elev_spread

Tests
-----
 * Complete the test/check_spatdif_osc test

Features
--------
 * Compile translators as dynamic libraries
 * provide an example of an individual build system for a translate. ie, if someone has spatosc installed, they can write and build a new translator without modifying spatosc.
 * Rename current spatdif_translator to basic_translator. Eventually we can have a real spatdif translator that adheres exactly to the version found at spatdif.org
 * Support multicast and TCP in OscSender and OscReceiver. Perhaps use liblo urls in constructor arguments? (eg, osc.upd://239.0.0.1:9999/ or osc.tcp://localhost:9998/)
 * Support specifying the network interface to listen from
 * support either int, float, double for numerical OSC typetags. ie, in oscutil, change argMatchesType() to something like getStringArg() and getNumericArg() using these liblo methods:
   * int lo_is_numerical_type(lo_type a)
   * int lo_is_string_type(lo_type a)
   * lo_hires lo_hires_val(lo_type type, lo_arg * p)
 * state saving (in XML)

Examples
--------
 * Progress in the Ogre example
 * include the examples into the build system

Bugs
----
 * maths:425 and 450: conversion from 'double' to 'float', possible loss of data
 * Handle errors if if OscReceiver or SpatdifReceiver cannot bind a socket

Packaging
---------
 * regex support on OSX has broken; need to fix

Refactoring
-----------
 * support quaternions in the API, no only aed-style orientation
 * Should we warn clients that we disconnected some nodes?
 * Add property map to translators
 * Make Node::handleMessage not liblo-specific.
 * Use Wrapper instead of writing liblo-specific code in Node and Connection methods?
 * Rename SoundSource to Source and Listener to Sink - or see what renaming could make more sense
 * Port could be an unsigned int for OscSender, OscReceiver, etc. It would make more sense
 * rename namespace OSCutils to oscutils

Wrapper for OSC and FUDI callbacks
----------------------------------
 * [s:nodeName] [s:method] [s:typeTags] [s:args...]

More (dmitri-specific) tools in the wrapper
-------------------------------------------
sendOscMessageToTranslator(translator, args)
sendOscSetFloatMessageToDmtri(translator, controlPoint, f)
sendOscSetIntMessageToDmtri(translator, controlPoint, i)
sendOscSetStringMessageToDmtri(translator, controlPoint, s)
sendOscSetDoubleMessageToDmtri(translator, controlPoint, d)

