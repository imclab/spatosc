# THIS FILE WAS MACHINE-GENERATED by parsetokens.cpp on Jun  7 2010, 11:15:00.
# DO NOT MAKE CHANGES TO THIS FILE, THEY WILL BE OVERWRITTEN!

import string

_ciFirstToken      = -32768  # Used in loops
_ciTokenEndGuard   = -32644  # guard value, for use in delimiting loops and arrays

ciMinimum          = -32768  # minimum value
ciMaximum          = -32767  # maximum value
ciAverage          = -32766  # average value
ciUnknown          = -32765  # indicates unknown token
ciInfo             = -32764  # Information regarding a control point address (i.e. ControlPointAddressInfo)
ciSet              = -32763  # prefix demarking addresses that should be copy/set at subcue-recall time only.
ciMaster           = -32762  # a prefix used to watch all control points in a given category in firmware...
ciWaitTime         = -32761  # "wait time for use in subcues containing spec that follows"
ciFadeTime         = -32760  # "fade time for use in subcues containing spec that follows"
ciSystem           = -32759  # Relating to the entire system (e.g. Manual system level fader)
ciInput            = -32758  # Relating to inputs (e.g. console faders)
ciOutput           = -32757  # Relating to outputs (e.g. output masters faders)
ciAux              = -32756  # Relating to aux-outs (e.g. the Aux Masters window)
ciVGroup           = -32755  # Relating to VGroups (e.g. vgroups window)
ciBus              = -32754  # Relating to buses (e.g. bus masters window)
ciSpaceMap         = -32753  # Relating to spacemap stuff (e.g. spacemap window)
ciTimeCode         = -32752  # reflect incoming time code (as in transport window)
ciAutomation       = -32751  # reflect the automation state (current cue, etc, as in transport window)
ciEngine           = -32750  # stuff relating to a Dmitri engine/brain module
ciVRAS             = -32749  # stuff relating to a VRAS plugin
ciWildTracks       = -32748  # control points for the WildTracks recording/playback system
ciPageGroup        = -32747  # control points for CueConsole page groups
ciAnalog           = -32746  # prefix demarking addresses whose values control analog hardware directly.
ciConfig           = -32745  # Message value; holds a flattened address set indicating all mixer points
ciLevel            = -32744  # Float value; sound level gain (nDb);
ciTrim             = -32743  # Float value; sound level trim (nDb);
ciSolo             = -32742  # Boolean value; true iff solo is active;
ciMute             = -32741  # Boolean value; true iff muted;
ciInvert           = -32740  # Boolean value; true iff inverted;
ciPan              = -32739  # Float value; (-1.0f=left, 0.0f=centered, 1.0f=right)
ciMeter            = -32738  # Float value; metered sound level (nDb);
ciClip             = -32737  # Boolean value; true iff clipped recently
ciEffectPre        = -32736  # Boolean value; true iff post, false iff pre
ciIsolate          = -32735  # Sub-category; go on to index 2 for further categorization
ciEQ               = -32734  # Sub-category; go on to index 2 for further categorization
ciDynamics         = -32733  # Sub-category; go on to index 2 for further categorization
ciAssign           = -32732  # Sub-category; go on to index 2 for further categorization
ciTrajectory       = -32731  # Sub-category; go on to index 2 for further categorization
ciName             = -32730  # String value; user-defined, human-readable text label for a column of the given category
ciSelect           = -32729  # Boolean value; true iff this channel on this index is selected for value-capture
ciReverb           = -32728  # Sub-category of VRAS; go on to index 2 for further categorization
ciEarlyReflection  = -32727  # Sub-category of VRAS; go on to index 2 for further categorization
ciListen           = -32726  # Boolean value; true iff (AFL/PFL) should be enabled for this (input/output/auxout)
ciDeck             = -32725  # Sub-category of WildTracks:  go on to index 2 for further categorization
ciDrive            = -32724  # Used by the drive-formatting GUI
ciLoop             = -32723  # For WildTracks looping stuff
ciCount            = -32722  # Refers to a count of objects
ciPhantom          = -32721  # Boolean value; Phantom power
ciLowLevel         = -32720  # Refers to things that are done in the low-level mixer
ciScript           = -32719  # Refers to a running script process
ciCommand          = -32718  # Command string for a script process
ciBypass           = -32717  # Used e.g. for bypassing EQ bands
ciTimeBase         = -32716  # Used to indicate e.g. the base time of a deck's playback
ciPosition         = -32715  # point value;  position in space map (or int32 milliseconds into a trajectory)
ciPositionPercent  = -32714  # float value;  (0.0f->1.0f) == percentage of way through a trajectory
ciRepetitions      = -32713  # float value:  number of repetitions of a traj playback (-1==infinite, 0==stop)
ciDuration         = -32712  # int32 value:  number of milliseconds to play back (-1==infinite, 0==stop)
ciOffset           = -32711  # point value;  offset in space map
ciScale            = -32710  # point value;  scale in space map
ciDivergence       = -32709  # float value;  divergence
ciRotation         = -32708  # float value;  rotation of space map
ciRate             = -32707  # float value;  rate multiplier for trajectory
ciX                = -32706  # float value:  horizontal position
ciY                = -32705  # float value:  vertical position
ciZ                = -32704  # float value:  (currently unused)
ciDelay            = -32703  # int32 value:  delay time in milliseconds
ciSettings         = -32702  # 
ciActive           = -32701  # modifier (currently active object)
ciNext             = -32700  # modifier (upcoming object)
ciA                = -32699  # Used in SpaceMap subcues
ciB                = -32698  # "" ""
ciID               = -32697  # int32 value;  database ID of the given object
ciIndex            = -32696  # int32 value;  index-within-parent of the given object
ciSize             = -32695  # int32 value;  number of items held by the aforementioned DbItem
ciHold             = -32694  # used for the global listen-hold control point
ciObsolete0        = -32693  # not currently used (was ciTickTime)
ciObsolete1        = -32692  # not currently used (was ciTickPeriod)
ciEnable           = -32691  # Boolean value; true iff activity is enabled
ciChannel          = -32690  # Boolean value; true iff EQ channel is enabled
ciBandBypass       = -32689  # Boolean value; true iff EQ band is bypassed
ciType             = -32688  # int32 value; EQ type
ciFrequency        = -32687  # float value; EQ freq (Hz)
ciQ                = -32686  # float value; EQ Q (??)
ciThreshold        = -32685  # float value;  Threshold level (nDb)
ciAttack           = -32684  # int64 value;  Attack time (nanoseconds)
ciRelease          = -32683  # int64 value;  Release time (nanoseconds)
ciRatio            = -32682  # float value;  Ratio (?)
ciMakeupGain       = -32681  # float value;  Makeup gain (nDb)
ciCPU              = -32680  # float value; % dsp used
ciMemory           = -32679  # float value; % memory used
ciLink             = -32678  # int32 value; [0-3] indicates color of link light on front panel
ciNoiseGate        = -32677  # category token for dynamics
ciCompressor       = -32676  # category token for dynamics
ciTemperature      = -32675  # float value; temperature (F)
ciVoltage          = -32674  # float value; voltage (F)
ciChecksum         = -32673  # int32 value; checksum
ciDamping          = -32672  # float value (0.0f-1.0f = 0-100%)
ciDeltaMax         = -32671  # float value (???)
ciShapeFactor      = -32670  # float value (???)
ciAttenuation      = -32669  # high-frequency attenuation factor (0.0f-1.0f = 0-100%)
ciCueList          = -32668  # used for currently selected cue list, etc.
ciCueEntry         = -32667  # used for currently selected cue entry, etc.
ciCue              = -32666  # used for most recently recalled cue, etc.
ciSubcueEntry      = -32665  # used for most recently recalled subcue entry, etc.
ciSubcue           = -32664  # used for most recently recalled subcue, etc.
ciServer           = -32663  # refers to a server computer
ciSubscription     = -32662  # used to count subscriptions
ciPath             = -32661  # String value: wildtracks playback file lookup prefixes path (e.g. "/mnt/wtdrives/*/wtrxaudio:/tmp/supportfiles")
ciMedia            = -32660  # Message value: archived WildTracksDeckSubcue object
ciTrack            = -32659  # int32 value:  Which audio track in the deck to read from or write to
ciStatus           = -32658  # int32 value:  one of the WILDTRACKS_CHANNEL_STATUS constants
ciRecording        = -32657  # String value: wildtracks recording file placement path (e.g. "e.g. "/mnt/wtdrives/*/wtrxaudio")
ciPatch            = -32656  # Used for hot-patching channels (see FogBugz #2851)
ciRange            = -32655  # Used in dynamics processing (added per Henk's request)
ciLimiter          = -32654  # ""
ciExpander         = -32653  # ""
ciColor            = -32652  # Used for coloring fader knobs
ciTouched          = -32651  # Used to indicate when the user is touching a CC2 control
ciScratch          = -32650  # For the user's use for miscellaneous purposes (FogBugz #5909)
ciDropout          = -32649  # Used to flash the Wild Tracks window after an audio dropout (FogBugz #6079)
ciHint             = -32648  # Used to assist interpretation of incoming MTC values (FogBugz #6271)
ciLeft             = -32647  # Used in listen-enable CPs
ciRight            = -32646  # Used in listen-enable CPs
ciFreewheel        = -32645  # Used in control the timecode-freewheel logic (FogBugz #6302)

_lxtokens = [
   "Minimum",         # -32768: minimum value
   "Maximum",         # -32767: maximum value
   "Average",         # -32766: average value
   "Unknown",         # -32765: indicates unknown token
   "Info",            # -32764: Information regarding a control point address (i.e. ControlPointAddressInfo)
   "Set",             # -32763: prefix demarking addresses that should be copy/set at subcue-recall time only.
   "Master",          # -32762: a prefix used to watch all control points in a given category in firmware...
   "WaitTime",        # -32761: "wait time for use in subcues containing spec that follows"
   "FadeTime",        # -32760: "fade time for use in subcues containing spec that follows"
   "System",          # -32759: Relating to the entire system (e.g. Manual system level fader)
   "Input",           # -32758: Relating to inputs (e.g. console faders)
   "Output",          # -32757: Relating to outputs (e.g. output masters faders)
   "Aux",             # -32756: Relating to aux-outs (e.g. the Aux Masters window)
   "VGroup",          # -32755: Relating to VGroups (e.g. vgroups window)
   "Bus",             # -32754: Relating to buses (e.g. bus masters window)
   "SpaceMap",        # -32753: Relating to spacemap stuff (e.g. spacemap window)
   "TimeCode",        # -32752: reflect incoming time code (as in transport window)
   "Automation",      # -32751: reflect the automation state (current cue, etc, as in transport window)
   "Engine",          # -32750: stuff relating to a Dmitri engine/brain module
   "VRAS",            # -32749: stuff relating to a VRAS plugin
   "WildTracks",      # -32748: control points for the WildTracks recording/playback system
   "PageGroup",       # -32747: control points for CueConsole page groups
   "Analog",          # -32746: prefix demarking addresses whose values control analog hardware directly.
   "Config",          # -32745: Message value; holds a flattened address set indicating all mixer points
   "Level",           # -32744: Float value; sound level gain (nDb);
   "Trim",            # -32743: Float value; sound level trim (nDb);
   "Solo",            # -32742: Boolean value; true iff solo is active;
   "Mute",            # -32741: Boolean value; true iff muted;
   "Invert",          # -32740: Boolean value; true iff inverted;
   "Pan",             # -32739: Float value; (-1.0f=left, 0.0f=centered, 1.0f=right)
   "Meter",           # -32738: Float value; metered sound level (nDb);
   "Clip",            # -32737: Boolean value; true iff clipped recently
   "EffectPre",       # -32736: Boolean value; true iff post, false iff pre
   "Isolate",         # -32735: Sub-category; go on to index 2 for further categorization
   "EQ",              # -32734: Sub-category; go on to index 2 for further categorization
   "Dynamics",        # -32733: Sub-category; go on to index 2 for further categorization
   "Assign",          # -32732: Sub-category; go on to index 2 for further categorization
   "Trajectory",      # -32731: Sub-category; go on to index 2 for further categorization
   "Name",            # -32730: String value; user-defined, human-readable text label for a column of the given category
   "Select",          # -32729: Boolean value; true iff this channel on this index is selected for value-capture
   "Reverb",          # -32728: Sub-category of VRAS; go on to index 2 for further categorization
   "EarlyReflection", # -32727: Sub-category of VRAS; go on to index 2 for further categorization
   "Listen",          # -32726: Boolean value; true iff (AFL/PFL) should be enabled for this (input/output/auxout)
   "Deck",            # -32725: Sub-category of WildTracks:  go on to index 2 for further categorization
   "Drive",           # -32724: Used by the drive-formatting GUI
   "Loop",            # -32723: For WildTracks looping stuff
   "Count",           # -32722: Refers to a count of objects
   "Phantom",         # -32721: Boolean value; Phantom power
   "LowLevel",        # -32720: Refers to things that are done in the low-level mixer
   "Script",          # -32719: Refers to a running script process
   "Command",         # -32718: Command string for a script process
   "Bypass",          # -32717: Used e.g. for bypassing EQ bands
   "TimeBase",        # -32716: Used to indicate e.g. the base time of a deck's playback
   "Position",        # -32715: point value;  position in space map (or int32 milliseconds into a trajectory)
   "PositionPercent", # -32714: float value;  (0.0f->1.0f) == percentage of way through a trajectory
   "Repetitions",     # -32713: float value:  number of repetitions of a traj playback (-1==infinite, 0==stop)
   "Duration",        # -32712: int32 value:  number of milliseconds to play back (-1==infinite, 0==stop)
   "Offset",          # -32711: point value;  offset in space map
   "Scale",           # -32710: point value;  scale in space map
   "Divergence",      # -32709: float value;  divergence
   "Rotation",        # -32708: float value;  rotation of space map
   "Rate",            # -32707: float value;  rate multiplier for trajectory
   "X",               # -32706: float value:  horizontal position
   "Y",               # -32705: float value:  vertical position
   "Z",               # -32704: float value:  (currently unused)
   "Delay",           # -32703: int32 value:  delay time in milliseconds
   "Settings",        # -32702: 
   "Active",          # -32701: modifier (currently active object)
   "Next",            # -32700: modifier (upcoming object)
   "A",               # -32699: Used in SpaceMap subcues
   "B",               # -32698: "" ""
   "ID",              # -32697: int32 value;  database ID of the given object
   "Index",           # -32696: int32 value;  index-within-parent of the given object
   "Size",            # -32695: int32 value;  number of items held by the aforementioned DbItem
   "Hold",            # -32694: used for the global listen-hold control point
   "Obsolete0",       # -32693: not currently used (was ciTickTime)
   "Obsolete1",       # -32692: not currently used (was ciTickPeriod)
   "Enable",          # -32691: Boolean value; true iff activity is enabled
   "Channel",         # -32690: Boolean value; true iff EQ channel is enabled
   "BandBypass",      # -32689: Boolean value; true iff EQ band is bypassed
   "Type",            # -32688: int32 value; EQ type
   "Frequency",       # -32687: float value; EQ freq (Hz)
   "Q",               # -32686: float value; EQ Q (??)
   "Threshold",       # -32685: float value;  Threshold level (nDb)
   "Attack",          # -32684: int64 value;  Attack time (nanoseconds)
   "Release",         # -32683: int64 value;  Release time (nanoseconds)
   "Ratio",           # -32682: float value;  Ratio (?)
   "MakeupGain",      # -32681: float value;  Makeup gain (nDb)
   "CPU",             # -32680: float value; % dsp used
   "Memory",          # -32679: float value; % memory used
   "Link",            # -32678: int32 value; [0-3] indicates color of link light on front panel
   "NoiseGate",       # -32677: category token for dynamics
   "Compressor",      # -32676: category token for dynamics
   "Temperature",     # -32675: float value; temperature (F)
   "Voltage",         # -32674: float value; voltage (F)
   "Checksum",        # -32673: int32 value; checksum
   "Damping",         # -32672: float value (0.0f-1.0f = 0-100%)
   "DeltaMax",        # -32671: float value (???)
   "ShapeFactor",     # -32670: float value (???)
   "Attenuation",     # -32669: high-frequency attenuation factor (0.0f-1.0f = 0-100%)
   "CueList",         # -32668: used for currently selected cue list, etc.
   "CueEntry",        # -32667: used for currently selected cue entry, etc.
   "Cue",             # -32666: used for most recently recalled cue, etc.
   "SubcueEntry",     # -32665: used for most recently recalled subcue entry, etc.
   "Subcue",          # -32664: used for most recently recalled subcue, etc.
   "Server",          # -32663: refers to a server computer
   "Subscription",    # -32662: used to count subscriptions
   "Path",            # -32661: String value: wildtracks playback file lookup prefixes path (e.g. "/mnt/wtdrives/*/wtrxaudio:/tmp/supportfiles")
   "Media",           # -32660: Message value: archived WildTracksDeckSubcue object
   "Track",           # -32659: int32 value:  Which audio track in the deck to read from or write to
   "Status",          # -32658: int32 value:  one of the WILDTRACKS_CHANNEL_STATUS constants
   "Recording",       # -32657: String value: wildtracks recording file placement path (e.g. "e.g. "/mnt/wtdrives/*/wtrxaudio")
   "Patch",           # -32656: Used for hot-patching channels (see FogBugz #2851)
   "Range",           # -32655: Used in dynamics processing (added per Henk's request)
   "Limiter",         # -32654: ""
   "Expander",        # -32653: ""
   "Color",           # -32652: Used for coloring fader knobs
   "Touched",         # -32651: Used to indicate when the user is touching a CC2 control
   "Scratch",         # -32650: For the user's use for miscellaneous purposes (FogBugz #5909)
   "Dropout",         # -32649: Used to flash the Wild Tracks window after an audio dropout (FogBugz #6079)
   "Hint",            # -32648: Used to assist interpretation of incoming MTC values (FogBugz #6271)
   "Left",            # -32647: Used in listen-enable CPs
   "Right",           # -32646: Used in listen-enable CPs
   "Freewheel",       # -32645: Used in control the timecode-freewheel logic (FogBugz #6302)
]

# Given a control point index in numeric form, returns the associated text string
def GetTokenString(x, userIndices):
   if (x < 0):
      x = x - _ciFirstToken;
      if (x >= 0):
         return _lxtokens[x]
      else:
         return "??"
   else:
      if (userIndices == 1):
         return "%d" % (x+1)
      else:
         return "%d" % (x)

# Given a control point index string, returns the associated numeric form
def ParseTokenString(s, userIndices):
   s = s.strip().lower()
   if (len(s) == 0):
      return ciUnknown
   o = ord(s[0])
   if ((o >= ord('0')) and (o <= ord('9'))):
      try:
         i = int(s)
         if (userIndices):
            i = i - 1
      except:
         i = 0
      return i
   else:
      numTokens = len(_lxtokens)
      for i in range(numTokens):
         if (s == _lxtokens[i].lower()):
            return i + _ciFirstToken

         # No match?  Okay, try it without the s
         if (s[len(s)-1] == 's'):
            s2 = s[:-1]
            for i in range(numTokens):
               if (s2 == _lxtokens[i].lower()):
                  return i + _ciFirstToken
      return ciUnknown

# Like GetTokenString(), except will return a space-separated string based on a list
def GetTokenStringList(x, userIndices):
   ret = ""
   for xx in x:
      if (len(ret) > 0):
         ret = ret + " "
      ret = ret + GetTokenString(xx, userIndices)
   return ret

# Like ParseTokenString(), except will return a list based on space-separated strings
def ParseTokenStringList(s, userIndices):
   s = s.strip()
   ret = []
   if (len(s) > 0):
      toks = string.split(s, ' ')
      for xx in toks:
         if len(xx) > 0:
            ret.append(ParseTokenString(xx, userIndices))
   return ret
