Contributing to spatosc
-----------------------

This file describes some development practices and coding standards for this project. Its syntax follows the rst format.
This file is in the public domain.


Coding style
------------

Let's now describe a bit the C++ coding style in this project.

(this is just a proposal for now, please modify.)

 * variables should camelcase. Like "eggSpam".
 * Class attributes should camelcase, with a trailing underscore. Like "eggSpam_".
 * Class/type names should be camel case with the first letter capital. Like "EggSpam".
 * File names should be lowercase, and the words should be stuck together. Like "eggspam.cpp" and "eggspam.h".
 * The file name should be named after the single class it contents, if possible. 
 * Avoid global functions, they should be enclosed in a namespace.
 * Try to comment the methods, attributes and classes you write. Use inline comments, plus the Doxygen-style headers.
 * Try to explain what a thing does in how you name it.
 * Indent with four spaces. No tabs.
 * No need to use curly braces with if, for, do, and while statements if they contain only one line of code. (but indent it)
 * Declare local variables as close as possible to where they are used, not in the beginning of the method.


Version Number
--------------

It is made of major.minor.micro numbers. Releases with an odd minor version number are in an unstable branch, whose API and command line argument might change. (sometimes a lot) When the minor number is even, it means it's a stable branch, with only new features that don't break old ones, or bug fixes. 

The version number is located in configure.ac and must always be one micro number ahead, unless this is a tag. That means that if we have released 0.1.0, the version number in configure.ac must be 0.1.1 until we release 0.1.1, and so forth.


The ChangeLog File
------------------

It is generated by calling the following command:

 $ git log --pretty=medium > ChangeLog


Creating a Tarball - The Release Process
----------------------------------------

Make sure the RELEASE notes, the NEWS file are up-to-date.
Make sure the version number in configure.ac is correct.
Commit any pending changes.

 $ ./autogen.sh
 $ ./configure
 $ make
 $ make distcheck

Create the tag in git.
Update the version number in configure.ac to the next release to come. Make a new commit. 


The RELEASE notes and the NEWS file
-----------------------------------

The RELEASE file contains the release notes for the current (or next) release. We list there the bugs fixed and the new features. We also explain the reason for some changes if needed. The NEWS file contains all the previous release notes. For example, for a tag 0.1.3, it should contain the release notes for 0.1.0 to 0.1.2.


The README File
---------------

We use the GNU Autotools, and Automake overwrites the INSTALL file. Therefore, we write the installation instructions in the README file, along with a quick explanation of how to use the software, and what it does.


The TODO File
-------------

We store a list of things todo there.


The README File
---------------

The installations instructions are one level higher, in the README file.



Historic
--------

Let's talk about the choices made in this library and software.

[todo]



Libraries we use
----------------

 * liblo
