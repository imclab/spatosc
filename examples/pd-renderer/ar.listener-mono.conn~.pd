#N canvas 854 449 604 841 10;
#X obj 2 1 cnv 15 500 30 empty empty DSP.plugin:(ar.listener-mono~)
5 15 1 18 -228856 -16662 0;
#X obj 258 7 cnv 20 20 20 empty empty nodeID:(\$2) 5 10 0 12 -233017
-66577 0;
#X obj 315 37 namecanvas \$4.plugin.patch;
#X text 178 340 <- audio from source;
#X text 10 62 the audio signal should be copied and routed N times
for each of the N loudspeakers;
#X obj 70 341 receive~ \$2.from~;
#X text 20 100 from vAudioRenderer;
#N canvas 267 33 704 530 more 0;
#X obj 507 45 r \$4;
#X text 552 47 <- connection messages & coeffs;
#X obj 275 169 s \$1-to-SPIN;
#X text 372 170 <- this is how to send to SPIN;
#X text 163 213 <- this is how to receiver listener params;
#X obj 275 147 list prepend \$3 setParam;
#X text 63 272 (alternatively \, params can be stored in an anyreg
that lives in the listener's pugin patch \, and accessed here);
#X obj 36 52 r \$4.nodeMsg;
#X obj 70 214 r \$3.nodeMsg;
#X obj 506 72 route list setThru mute;
#X obj 70 240 route setParam setSpread;
#X text 115 262 need "setSpread" method ??;
#X text 64 304 yaw FILTER: Lpf1 = 500 + ( 21550 * (0.5 - ( .5*cos(pow(rolloffScaler
\, 4)*M_PI) ) ) ) \;;
#X text 63 376 rolloffScaler = (double) (1.0 - (.01*conn->rolloffEffect
* (1.0 - snkyawGain))) \;;
#X text 65 337 snkyawGain = conn->snk->rolloff->getValue( (snkyaw *
conn->snk->spread) / M_PI ) \;;
#X obj 36 79 route setDistanceEffect setRolloffEffect setDopplerEffect
setDiffractionEffect setThru;
#X text 129 49 connection params from SPIN;
#X text 55 489 OLD MESSAGE FROM vAudioRendedr: id sink-gain diffraction_hz
src-gain absorption_hz dist_ms;
#X connect 0 0 9 0;
#X connect 5 0 2 0;
#X connect 7 0 15 0;
#X connect 8 0 10 0;
#X restore 425 60 pd more;
#X obj 70 468 dsp.conn.distance~;
#X obj 59 280 s \$0-thru;
#X obj 99 256 s \$0-mute;
#X obj 140 439 r \$0-thru;
#X obj 205 440 r \$0-mute;
#X obj 350 130 tgl 15 0 empty empty empty 17 7 0 10 -262144 -1 -1 0
1;
#X obj 349 155 s \$0-mute;
#X text 185 476 source to sink distance and absorption;
#X obj 132 556 *~ 0.2;
#X obj 132 530 lop~ 50;
#X text 186 527 ambient signal (indirect);
#X floatatom 182 557 5 0 0 0 - - -;
#X obj 27 121 receive \$2->\$3;
#X obj 27 164 route bang thru mute gainDB delay aed;
#X text 241 636 sink-gain diffraction_hz;
#X obj 349 93 loadbang1 0;
#X obj 209 187 s \$0-aed;
#X obj 231 588 r \$0-aed;
#X obj 138 233 s \$0-gainDb;
#X obj 172 213 s \$0-delay;
#X obj 106 379 r \$0-gainDb;
#X obj 200 379 r \$0-delay;
#X obj 106 406 dsp.compute-src1;
#N canvas 0 22 457 178 debug 0;
#X obj 237 50 unpack 0 0 0;
#X floatatom 274 82 5 0 0 0 - - -;
#X floatatom 311 83 5 0 0 0 - - -;
#X floatatom 234 82 5 0 0 0 - - -;
#X text 219 102 azi-rad elev-rad distance-m;
#X obj 237 26 r \$0-aed;
#X floatatom 57 57 5 0 0 0 - - -;
#X floatatom 150 70 5 0 0 0 - - -;
#X text 163 84 dist-ms;
#X text 63 69 gainDB;
#X obj 150 45 r \$0-delay;
#X obj 57 34 r \$0-delay;
#X connect 0 0 3 0;
#X connect 0 1 1 0;
#X connect 0 2 2 0;
#X connect 5 0 0 0;
#X connect 10 0 7 0;
#X connect 11 0 6 0;
#X restore 263 116 pd debug;
#X obj 72 647 dsp.conn-vmic~ \$0 0 vmic \$3;
#X obj 231 615 dsp.compute-sink1 \$3 vmic;
#X connect 5 0 8 0;
#X connect 8 0 17 0;
#X connect 8 0 32 0;
#X connect 11 0 8 2;
#X connect 12 0 8 3;
#X connect 13 0 14 0;
#X connect 16 0 32 1;
#X connect 17 0 16 0;
#X connect 19 0 16 1;
#X connect 20 0 21 0;
#X connect 21 1 9 0;
#X connect 21 2 10 0;
#X connect 21 3 26 0;
#X connect 21 4 27 0;
#X connect 21 5 24 0;
#X connect 25 0 33 0;
#X connect 28 0 30 0;
#X connect 29 0 30 1;
#X connect 30 0 8 1;
#X connect 33 0 32 2;
#X coords 0 0 1 1 400 400 0;
